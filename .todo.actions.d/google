#!/usr/bin/python

# The client_id and client_secret are copied from the API Access tab on
# the Google APIs Console
CLIENT_ID="YOUR_CLIENT_ID"
CLIENT_SECRET="YOUR_CLIENT_SECRET"

import os
import sys
import gflags
import httplib2

from apiclient.discovery import build
from oauth2client.file import Storage
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.tools import run


__version__ = "0.1"
__date__ = "2011/06/06"
__updated__ = "2011/06/07"
__author__ = "Andrew McIntosh (github.com/amcintosh)"
__copyright__ = "Copyright 2011, Andrew McIntosh"
__license__ = "GPL"

FLAGS = gflags.FLAGS
#FLAGS.auth_local_webserver = False

# Set up a Flow object for authentication. Uses OAuth 2.0
FLOW = OAuth2WebServerFlow(
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET,
    scope='https://www.googleapis.com/auth/tasks',
    user_agent='todo.txt/0.1')


def usage():
    """Prints progam usage"""
    print "USAGE: %s [push|pull]"% (sys.argv[1], )

def getAPIService():
    """Authorize and return a session for the Tasks API"""
    # Check is credentials are stored and valid. Otherwise get credentials
    storage = Storage(".tasks.dat")
    credentials = storage.get()
    if credentials is None or credentials.invalid == True:
         credentials = run(FLOW, storage)

    # httplib2.Http object to handle our HTTP requests authorized with Credentials.
    http = httplib2.Http()
    http = credentials.authorize(http)

    # Build a service object for interacting with the API. 
    service = build(serviceName="tasks", version="v1", http=http,
       developerKey='YOUR_DEVELOPER_KEY')	
    return service

def pull():
    """Get Tasks from google task API and add those that don't exist to todo.txt"""
    service = getAPIService()
    tasklists = service.tasklists().list().execute()
    try:
        todoFile = open(os.environ.get("TODO_DIR")+"/todo.txt", "r+")
        doneFile = open(os.environ.get("TODO_DIR")+"/done.txt", "r+")
    except IOError:
        print "ERROR: The todo.txt files could not be read."
        sys.exit(2)

    for tasklist in tasklists["items"]:
        tasklistName = tasklist["title"]
        tasks = service.tasks().list(tasklist=tasklist["id"]).execute()

        for task in tasks["items"]:
            if task["title"].strip():
                #Check for the task in the todo files
                foundInTodo = False
                foundInDone = False
                for line in todoFile:
                    if task["title"] in line:
                        foundInTodo = True
                        break
                for line in doneFile:
                    if task["title"] in line:
                        foundInDone = True
                        break
            
                if task["status"] == "needsAction" and foundInTodo:
                    #Do nothing
                    pass
                elif task["status"] == "completed" and foundInTodo:
                    #Remove from todo.txt and add to done.txt
                    pass
                elif task["status"] == "needsAction" and foundInDone:
                    #Do nothing (changes need synced up, but not my problem)
                    pass
                elif task["status"] == "completed" and foundInDone:
                    #Do nothing
                    pass
                if task["status"] == "needsAction":
                    #Add to todo.txt
                    pass
                elif task["status"] == "completed":
                    #Add to done.txt
                    pass
    todoFile.close()
    doneFile.close()


def push():
    """Get items from todo.txt and adds them to google tasks via API"""
    service = getAPIService()

def main(argv):
    if len(argv) < 2 or argv[0]=="usage":
        usage()
        sys.exit(2)

    if argv[1]=="pull":
        print "pulling"
        pull()        
    elif argv[1]=="push":
        print "pushing"
        push()
    else:
        usage()

if __name__ == "__main__":
    main(sys.argv[1:])
