#!/usr/bin/python

# The client_id and client_secret are copied from the API Access tab on
# the Google APIs Console
CLIENT_ID="YOUR_CLIENT_ID"
CLIENT_SECRET="YOUR_CLIENT_SECRET"

import os
import sys
import gflags
import httplib2
import datetime

from apiclient.discovery import build
from oauth2client.file import Storage
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.tools import run
from subprocess import call

__version__ = "0.1"
__date__ = "2011/06/06"
__updated__ = "2011/10/10"
__author__ = "Andrew McIntosh (github.com/amcintosh)"
__copyright__ = "Copyright 2011, Andrew McIntosh"
__license__ = "GPL"

FLAGS = gflags.FLAGS
#FLAGS.auth_local_webserver = False

# Set up a Flow object for authentication. Uses OAuth 2.0
FLOW = OAuth2WebServerFlow(
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET,
    scope='https://www.googleapis.com/auth/tasks',
    user_agent='todo.txt/0.1')


def usage():
    """Prints progam usage"""
    print "USAGE: %s [pull|push]"% (sys.argv[1], )


def getAPIService():
    """Authorize and return a session for the Tasks API"""
    # Check is credentials are stored and valid. Otherwise get credentials
    storage = Storage(".tasks.dat")
    credentials = storage.get()
    if credentials is None or credentials.invalid == True:
         credentials = run(FLOW, storage)

    # httplib2.Http object to handle our HTTP requests authorized with Credentials.
    http = httplib2.Http()
    http = credentials.authorize(http)

    # Build a service object for interacting with the API. 
    service = build(serviceName="tasks", version="v1", http=http,
       developerKey='YOUR_DEVELOPER_KEY')	
    return service


def addToTodo(task):
    """Format the google task and add it to todo file"""
    todo = task["title"]
    call([os.environ.get("TODO_FULL_SH"),"add",todo])


def addToDone(task):
    """Format the google task and add it to todo done file"""
    date = datetime.datetime.strptime(task["completed"], "%Y-%m-%dT%H:%M:%S.%fZ")
    todo = "x " + date.strftime("%Y-%m-%d") + " " + task["title"]
    call([os.environ.get("TODO_FULL_SH"),"addto","done.txt",todo])


def pull():
    """Get Tasks from google task API and add those that don't exist to todo.txt"""
    service = getAPIService()
    tasklists = service.tasklists().list().execute()
    call([os.environ.get("TODO_FULL_SH"),"archive"])
    try:
        todoFile = open(os.environ.get("TODO_DIR")+"/todo.txt", "r")
        doneFile = open(os.environ.get("TODO_DIR")+"/done.txt", "r")
    
        todos = []
        dones = []
        for line in todoFile:
            todos.append(line)
        for line in doneFile:
            dones.append(line)
        todoFile.close()
        doneFile.close()

    except IOError:
        print "ERROR: The todo.txt files could not be read."
        sys.exit(2)
 
    for tasklist in tasklists["items"]:
        tasklistName = tasklist["title"]
        tasks = service.tasks().list(tasklist=tasklist["id"]).execute()

        for task in tasks["items"]:

            if task["title"].strip():
                #Check for the task in the todo files
                foundInTodo = -1
                foundInDone = -1
                count = 1
                for item in todos:
                    if title in item:
                        foundInTodo = count
                        break
                    count+=1
                count = 1
                for item in dones:
                    if title in item:
                        foundInDone = count
                        break
                    count+=1            

                #Decide what to do with task
                if task["status"] == "needsAction" and foundInTodo>-1:
                    #Do nothing
                    pass
                elif task["status"] == "completed" and foundInTodo>-1:
                    #Remove from todo.txt and add to done.txt
                    call([os.environ.get("TODO_FULL_SH"),"do " + str(foundInTodo)])
                elif task["status"] == "needsAction" and foundInDone>-1:
                    #Do nothing (changes need synced up, but not my problem)
                    pass
                elif task["status"] == "completed" and foundInDone>-1:
                    #Do nothing
                    pass
                elif task["status"] == "needsAction":
                    #Add to todo.txt
                    addToTodo(task)                    
                elif task["status"] == "completed":
                    #Add to done.txt
                    addToDone(task)


def push(filename):
    """Get items from todo.txt and adds them to google tasks via API"""
    service = getAPIService()
    tasklists = service.tasklists().list().execute()
    call([os.environ.get("TODO_FULL_SH"),"archive"])

    try:
        todoFile = open(os.environ.get("TODO_DIR")+"/"+filename+".txt", "r")
    
        todos = []
        for line in todoFile:
            todos.append(line)
        todoFile.close()

    except IOError:
        print "ERROR: The " + filename + ".txt files could not be read."
        sys.exit(2)

    for todo in todos:
        for tasklist in tasklists["items"]:
            tasklistName = tasklist["title"]
            tasks = service.tasks().list(tasklist=tasklist["id"]).execute()
            for task in tasks["items"]:

                if task["title"].strip():


def main(argv):
    if len(argv) < 2 or argv[0]=="usage":
        usage()
        sys.exit(2)

    if argv[1]=="pull":
        print "pulling"
        pull()        
    elif argv[1]=="push":
        print "pushing"
        push("todo")
    elif argv[1]=="push" and argv[2]=="all":
        print "pushing all"
        push("todo")
        push("done")
    else:
        usage()


if __name__ == "__main__":
    main(sys.argv[1:])
